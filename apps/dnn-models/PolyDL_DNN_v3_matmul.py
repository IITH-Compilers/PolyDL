{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "import math\n",
    "import re "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# Keras 2.2.4/tensorflow 1.14.0 -> Version matching for local machine\n",
    "\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Dense\n",
    "from keras import optimizers\n",
    "from keras import initializers\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['matmul/matmul3.c_1024_1024_32768_poly_perf.csv', 'matmul/matmul3.c_1024_16_500000_poly_perf.csv', 'matmul/matmul3.c_1024_32768_1024_poly_perf.csv', 'matmul/matmul3.c_128_2048_4096_poly_perf.csv', 'matmul/matmul3.c_2048_4096_32_poly_perf.csv', 'matmul/matmul3.c_320_3072_4096_poly_perf.csv', 'matmul/matmul3.c_32768_1024_1024_poly_perf.csv', 'matmul/matmul3.c_4096_4096_4096_poly_perf.csv']\n"
     ]
    }
   ],
   "source": [
    "myname = 'Gagandeep'\n",
    "\n",
    "#Using os.walk to walk through each file in the directory provided\n",
    "files = []\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('matmul/'):\n",
    "    for filename in filenames:\n",
    "#         print(os.path.join(dirname, filename))\n",
    "        files.append(os.path.join(dirname, filename))\n",
    "\n",
    "# file_list = []\n",
    "# unique_file_list = []    \n",
    "\n",
    "\n",
    "# # For every file in the hierarchy this regex operation takes files only with N=1 or N=28\n",
    "\n",
    "# for value in files:\n",
    "#     x = re.search(\".*28_poly_perf.csv$\",value)\n",
    "# #     x = re.search(a,value)\n",
    "#     if(x):\n",
    "# #         print(x.group(0))\n",
    "#         file_list.append(x.group(0))\n",
    "#     y = re.search(\"\\w+/\\w+/\",value)\n",
    "#     if(y):\n",
    "#         if y.group(0) not in unique_file_list:\n",
    "#             unique_file_list.append(y.group(0))\n",
    "\n",
    "# #Sorts the ordering of files\n",
    "# file_list.sort()\n",
    "\n",
    "print(files)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# In[3]:\n",
    "\n",
    "\n",
    "# For particular file we are generating various permutations \n",
    "arr = []\n",
    "for diff_file in files:\n",
    "# for layer in range(1,20):\n",
    "    train_df = pd.read_csv(diff_file,header=None)\n",
    "    train_df = train_df.drop([0,2,3,4,5,6,7,8,9], axis=1)\n",
    "\n",
    "    train_df = train_df.sort_values(by=[1],ascending=False)\n",
    "\n",
    "    train_df = train_df.dropna(axis=1)\n",
    "    npdata = np.array(train_df)\n",
    "#     for i in range(len(npdata)):\n",
    "#         for j in range(i+1,len(npdata)):\n",
    "#             arr_predict.append(np.concatenate((npdata[i],npdata[j]), axis=0))\n",
    "    for i in range(len(npdata)):\n",
    "        for j in range(len(npdata)):\n",
    "            arr.append(np.concatenate((npdata[i],npdata[j]), axis=0))\n",
    "arr = np.asarray(arr)\n",
    "\n",
    "ver_2_GF = npdata.shape[1]\n",
    "\n",
    "\n",
    "# For each data point we are creating the output as 01 or 10 and concatenating with the file\n",
    "out1 = []\n",
    "out2 = []\n",
    "\n",
    "for i in range(len(arr)):\n",
    "    if arr[i][0] > arr[i][ver_2_GF]:\n",
    "        out1.append(1)\n",
    "        out2.append(0)\n",
    "\n",
    "    else:\n",
    "        out1.append(0)\n",
    "        out2.append(1)\n",
    "\n",
    "arr = pd.DataFrame(arr)\n",
    "arr = arr.drop([0,ver_2_GF],axis=1)\n",
    "arr[\"sum\"] = arr.sum(axis=1)\n",
    "arr = arr.loc[:,[1,2,3,4,6,7,8,9]].div(arr[\"sum\"], axis=0)\n",
    "arr.head()\n",
    "\n",
    "out1 = pd.DataFrame(out1)\n",
    "out2 = pd.DataFrame(out2)\n",
    "\n",
    "arr = pd.concat([arr, out1, out2,], axis=1, sort=False)\n",
    "arr = np.array(arr)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/40\n",
      "12147/12147 [==============================] - 21s 2ms/step - loss: 0.6880 - accuracy: 0.5262\n",
      "Epoch 2/40\n",
      "12147/12147 [==============================] - 21s 2ms/step - loss: 0.6583 - accuracy: 0.6021\n",
      "Epoch 3/40\n",
      "12147/12147 [==============================] - 21s 2ms/step - loss: 0.6291 - accuracy: 0.6395\n",
      "Epoch 4/40\n",
      "12147/12147 [==============================] - 20s 2ms/step - loss: 0.5825 - accuracy: 0.6851\n",
      "Epoch 5/40\n",
      "12147/12147 [==============================] - 21s 2ms/step - loss: 0.5661 - accuracy: 0.6974\n",
      "Epoch 6/40\n",
      "12147/12147 [==============================] - 21s 2ms/step - loss: 0.5588 - accuracy: 0.7025\n",
      "Epoch 7/40\n",
      "12147/12147 [==============================] - 21s 2ms/step - loss: 0.5547 - accuracy: 0.7052\n",
      "Epoch 8/40\n",
      "12147/12147 [==============================] - 21s 2ms/step - loss: 0.5506 - accuracy: 0.7081\n",
      "Epoch 9/40\n",
      "12147/12147 [==============================] - 21s 2ms/step - loss: 0.5482 - accuracy: 0.7095\n",
      "Epoch 10/40\n",
      "12147/12147 [==============================] - 21s 2ms/step - loss: 0.5462 - accuracy: 0.7107\n",
      "Epoch 11/40\n",
      "12147/12147 [==============================] - 21s 2ms/step - loss: 0.5439 - accuracy: 0.7123\n",
      "Epoch 12/40\n",
      "12147/12147 [==============================] - 21s 2ms/step - loss: 0.5425 - accuracy: 0.7132\n",
      "Epoch 13/40\n",
      "12147/12147 [==============================] - 20s 2ms/step - loss: 0.5400 - accuracy: 0.7150\n",
      "Epoch 14/40\n",
      "12147/12147 [==============================] - 21s 2ms/step - loss: 0.5389 - accuracy: 0.7157\n",
      "Epoch 15/40\n",
      "12147/12147 [==============================] - 21s 2ms/step - loss: 0.5374 - accuracy: 0.7167\n",
      "Epoch 16/40\n",
      "12147/12147 [==============================] - 21s 2ms/step - loss: 0.5361 - accuracy: 0.7171\n",
      "Epoch 17/40\n",
      "12147/12147 [==============================] - 20s 2ms/step - loss: 0.5343 - accuracy: 0.7183\n",
      "Epoch 18/40\n",
      "12147/12147 [==============================] - 21s 2ms/step - loss: 0.5332 - accuracy: 0.7188\n",
      "Epoch 19/40\n",
      "12147/12147 [==============================] - 21s 2ms/step - loss: 0.5322 - accuracy: 0.7195\n",
      "Epoch 20/40\n",
      "12147/12147 [==============================] - 21s 2ms/step - loss: 0.5305 - accuracy: 0.7204\n",
      "Epoch 21/40\n",
      "12147/12147 [==============================] - 21s 2ms/step - loss: 0.5296 - accuracy: 0.7210\n",
      "Epoch 22/40\n",
      "12147/12147 [==============================] - 21s 2ms/step - loss: 0.5288 - accuracy: 0.7210\n",
      "Epoch 23/40\n",
      "12147/12147 [==============================] - 20s 2ms/step - loss: 0.5266 - accuracy: 0.7223\n",
      "Epoch 24/40\n",
      "12147/12147 [==============================] - 21s 2ms/step - loss: 0.5262 - accuracy: 0.7225\n",
      "Epoch 25/40\n",
      "12147/12147 [==============================] - 21s 2ms/step - loss: 0.5244 - accuracy: 0.7234\n",
      "Epoch 26/40\n",
      "12147/12147 [==============================] - 21s 2ms/step - loss: 0.5239 - accuracy: 0.7239\n",
      "Epoch 27/40\n",
      "12147/12147 [==============================] - 21s 2ms/step - loss: 0.5233 - accuracy: 0.7243\n",
      "Epoch 28/40\n",
      "12147/12147 [==============================] - 21s 2ms/step - loss: 0.5214 - accuracy: 0.7253\n",
      "Epoch 29/40\n",
      "12147/12147 [==============================] - 20s 2ms/step - loss: 0.5208 - accuracy: 0.7252\n",
      "Epoch 30/40\n",
      "12147/12147 [==============================] - 20s 2ms/step - loss: 0.5196 - accuracy: 0.7262\n",
      "Epoch 31/40\n",
      "12147/12147 [==============================] - 20s 2ms/step - loss: 0.5187 - accuracy: 0.7265\n",
      "Epoch 32/40\n",
      "12147/12147 [==============================] - 21s 2ms/step - loss: 0.5175 - accuracy: 0.7271\n",
      "Epoch 33/40\n",
      "12147/12147 [==============================] - 21s 2ms/step - loss: 0.5173 - accuracy: 0.7274\n",
      "Epoch 34/40\n",
      "12147/12147 [==============================] - 20s 2ms/step - loss: 0.5119 - accuracy: 0.7306\n",
      "Epoch 40/40\n",
      "12147/12147 [==============================] - 21s 2ms/step - loss: 0.5115 - accuracy: 0.7309\n",
      "32535/32535 [==============================] - 27s 826us/step - loss: 0.5141 - accuracy: 0.7303\n",
      "Accuracy: 73.03\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# In[4]:\n",
    "\n",
    "\n",
    "# Till Here I have preprocessed the data properly.\n",
    "# Splitting the data into 70% training and 30% test data.\n",
    "np.random.shuffle(arr)\n",
    "length = int(0.70*(len(arr)))\n",
    "training_set = arr[:length]\n",
    "test_set = arr[length:]\n",
    "\n",
    "\n",
    "from numpy.random import seed\n",
    "seed(1)\n",
    "import tensorflow\n",
    "tensorflow.random.set_seed(2)\n",
    "\n",
    "model = Sequential()\n",
    "# model.add(Dense(32, input_dim=8, activation='relu'))\n",
    "# model.add(Dense(20, activation='relu'))\n",
    "# model.add(Dense(16, activation='relu'))\n",
    "# model.add(Dense(12, activation='softsign'))\n",
    "# model.add(Dense(8, activation='relu'))\n",
    "# model.add(Dense(2, activation='softmax'))\n",
    "\n",
    "model.add(Dense(64, input_dim=8, activation='relu'))\n",
    "model.add(Dense(32, activation='relu'))\n",
    "model.add(Dense(20, activation='relu'))\n",
    "model.add(Dense(16, activation='softsign'))\n",
    "model.add(Dense(8, activation='relu'))\n",
    "model.add(Dense(2, activation='softmax'))\n",
    "\n",
    "\n",
    "# In[5]:\n",
    "\n",
    "\n",
    "# #Initializing the keras Model\n",
    "# model = Sequential()\n",
    "# initializers.RandomUniform(minval=-0.05, maxval=0.05, seed=2)\n",
    "# model.add(Dense(32, input_dim=8, activation='relu',kernel_initializer='random_uniform'))\n",
    "# model.add(Dense(20, activation='relu',kernel_initializer='random_uniform'))\n",
    "# model.add(Dense(16, activation='relu',kernel_initializer='random_uniform'))\n",
    "# model.add(Dense(12, activation='softsign',kernel_initializer='random_uniform'))\n",
    "# model.add(Dense(8, activation='relu',kernel_initializer='random_uniform'))\n",
    "# model.add(Dense(2, activation='softmax',kernel_initializer='random_uniform'))\n",
    "\n",
    "\n",
    "# compile the keras model\n",
    "model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n",
    "# fit the keras model on the dataset\n",
    "model.fit(training_set[:,:-2],training_set[:,8:], epochs=40, batch_size=200)\n",
    "# evaluate the keras model\n",
    "_, accuracy = model.evaluate(test_set[:,:-2],test_set[:,8:])\n",
    "print('Accuracy: %.2f' % (accuracy*100))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[array([[-2.04232574e-01, -4.12297859e+01,  4.57078312e-03,\n",
      "        -3.04760206e-02, -5.55581894e+01,  5.55655845e-02,\n",
      "        -6.89468384e+01, -1.94397181e-01, -2.15619755e+01,\n",
      "        -2.66821861e+00, -3.22345886e+01,  1.50313675e-01,\n",
      "         8.92068291e+00, -6.89045715e+01, -6.77864151e+01,\n",
      "        -6.49821930e+01, -2.19443828e-01,  5.94377975e+01,\n",
      "        -3.83035541e-02, -2.58494645e-01,  2.70593941e-01,\n",
      "        -2.32478380e-01,  6.83187714e+01,  6.63129883e+01,\n",
      "        -6.82704697e+01,  1.68524361e+01,  6.09423637e+01,\n",
      "         3.51682396e+01,  1.07961506e-01,  6.97167130e+01,\n",
      "         6.57108994e+01, -1.91000595e+01, -1.79728251e-02,\n",
      "         1.05878159e-01, -1.21483240e+01,  1.03184283e+00,\n",
      "        -7.06654816e+01,  6.74264755e+01,  1.82504788e-01,\n",
      "        -1.51981607e-01,  2.37478912e-01, -5.79136133e+00,\n",
      "        -2.54950161e+01,  2.57056475e-01, -9.69647646e-01,\n",
      "         3.41641217e-01,  6.71449509e+01,  1.28910112e+01,\n",
      "        -3.48375171e-01,  1.85229897e-01, -2.23200023e-01,\n",
      "         7.59246826e+01, -6.52037978e-01, -6.11910858e+01,\n",
      "        -6.82576447e+01,  1.43996060e-01,  1.03813879e-01,\n",
      "        -2.24289298e-03, -6.71864548e+01, -2.99038639e+01,\n",
      "        -5.80365062e-02,  3.60891151e+01,  4.00286369e+01,\n",
      "        -2.84758930e+01],\n",
      "       [-1.53713703e-01, -3.01273842e+01,  2.63424575e-01,\n",
      "        -3.25063348e-01, -1.96907842e+00,  1.27987504e-01,\n",
      "        -8.05571973e-01, -2.25364655e-01, -1.02479057e+01,\n",
      "        -9.36671257e-01, -2.14189768e+00, -1.00263283e-01,\n",
      "         4.74591303e+00, -3.73233110e-01, -1.09398198e+00,\n",
      "        -1.27528727e+00,  4.95954677e-02,  9.42172110e-01,\n",
      "        -4.85214204e-01,  2.57560879e-01,  2.47484624e-01,\n",
      "         1.14758231e-01, -2.56865668e+00, -9.89522219e-01,\n",
      "         8.58538806e-01,  1.44777870e+01, -7.71373153e-01,\n",
      "        -1.12283850e+01, -2.75929600e-01, -3.77771592e+00,\n",
      "         5.72018528e+00,  2.67632508e+00,  1.08262323e-01,\n",
      "         2.46843919e-01, -6.65631628e+00,  4.05386418e-01,\n",
      "        -4.30472279e+00,  4.17629099e+00, -2.41570726e-01,\n",
      "         2.44347990e-01, -1.83570683e-02, -1.47620821e+00,\n",
      "         1.58511524e+01, -1.01457134e-01, -9.76594090e-01,\n",
      "         7.39779919e-02,  2.15258074e+00,  3.70343566e+00,\n",
      "        -5.41675627e-01,  3.02110314e-02, -4.87093292e-02,\n",
      "         7.81841087e+00, -1.98828116e-01, -1.08090508e+00,\n",
      "         2.46078968e-01, -1.43573940e-01, -2.57799655e-01,\n",
      "        -2.74681747e-01,  2.31838346e+00, -1.23382359e+01,\n",
      "         2.05440912e-02,  5.92754936e+00,  7.02304602e+00,\n",
      "         3.84386683e+00],\n",
      "       [-9.88351107e-02, -8.93012345e-01,  1.23847537e-01,\n",
      "         1.67390957e-01,  8.19367617e-02, -8.69178772e-02,\n",
      "         4.89043593e-02, -1.49767801e-01,  3.15069765e-01,\n",
      "         1.28934562e-01, -1.33334913e+01, -7.03142136e-02,\n",
      "         7.35169590e-01, -2.25807279e-01,  9.09621716e-02,\n",
      "         6.60751581e-01, -7.22872019e-02,  3.54222864e-01,\n",
      "         2.51528442e-01, -1.82247639e-01, -1.68484688e-01,\n",
      "         1.27251506e-01,  6.42335594e-01,  4.25796509e-01,\n",
      "         3.42826843e-02, -4.02164984e+00,  8.38686824e-01,\n",
      "         1.61925301e-01, -2.72531897e-01,  1.34527534e-01,\n",
      "        -1.65131545e+00,  7.23155916e-01, -2.31376454e-01,\n",
      "         4.63363826e-02,  1.59012035e-01, -2.70027846e-01,\n",
      "        -1.90392792e-01, -9.58932877e-01, -1.57030091e-01,\n",
      "        -1.44430548e-01, -2.47588843e-01,  8.04547295e-02,\n",
      "        -4.73359299e+00, -7.95571357e-02,  3.92660439e-01,\n",
      "         7.85915405e-02,  2.96531528e-01,  6.82714403e-01,\n",
      "         1.80135503e-01, -4.56187278e-02, -1.90374762e-01,\n",
      "        -1.19081008e+00, -7.46735139e-04, -1.25859630e+00,\n",
      "         9.85602364e-02, -2.80943125e-01, -2.47698724e-01,\n",
      "        -2.85837740e-01,  2.00440809e-01, -1.24845791e+00,\n",
      "         2.56009638e-01,  1.16328967e+00,  3.05005491e-01,\n",
      "        -5.33225298e+00],\n",
      "       [-2.80281007e-01,  1.71640530e-01, -4.11192268e-01,\n",
      "        -2.20069379e-01,  2.02916693e-02,  2.50373185e-02,\n",
      "         1.05391212e-01, -2.26337731e-01, -4.53403741e-01,\n",
      "         2.29753464e-01,  5.73604465e-01, -1.57760054e-01,\n",
      "        -1.30384338e+00,  2.27346554e-01,  2.13096172e-01,\n",
      "         1.34221524e-01, -1.25449784e-02, -1.26255184e-01,\n",
      "        -3.57313961e-01,  2.23262925e-02,  2.50944309e-02,\n",
      "        -2.27212772e-01,  1.17464289e-01,  1.83706373e-01,\n",
      "         1.05968587e-01,  3.34937602e-01, -3.42432231e-01,\n",
      "         5.82475185e-01, -2.28028491e-01,  1.65479362e-01,\n",
      "         2.71581441e-01,  6.79628193e-01, -3.36995035e-01,\n",
      "        -9.90391150e-02,  8.95471796e-02,  1.26401082e-01,\n",
      "         1.05815362e-02,  9.89090279e-02, -1.88713704e-04,\n",
      "        -6.54054433e-02, -1.07566640e-01,  2.33423367e-01,\n",
      "        -1.37393057e-01, -7.57324994e-02,  1.48807541e-01,\n",
      "        -3.85845691e-01,  1.12435654e-01,  8.49625230e-01,\n",
      "         1.59962714e-01, -1.19307652e-01,  6.89313700e-03,\n",
      "        -1.62760168e-02,  7.92662427e-02,  3.18677425e-01,\n",
      "         4.22131531e-02, -1.79288983e-02, -1.78721279e-01,\n",
      "        -4.79246527e-02,  2.09426671e-01, -5.06412208e-01,\n",
      "         1.03730381e-01, -3.18072438e-01,  5.41098177e-01,\n",
      "         6.88215792e-01],\n",
      "       [-1.87072799e-01,  5.51850281e+01, -3.48226309e-01,\n",
      "        -2.30148733e-01,  5.69112053e+01,  1.49594638e-02,\n",
      "         5.69275360e+01, -1.83628038e-01,  2.52861271e+01,\n",
      "         3.35085988e+00, -1.26214352e+01,  2.78855443e-01,\n",
      "         4.05803025e-01,  5.90253792e+01,  6.30209541e+01,\n",
      "         5.50513153e+01,  5.09742141e-01, -5.56938820e+01,\n",
      "         9.95925888e-02,  1.65006205e-01, -2.37858146e-01,\n",
      "        -2.40469992e-01, -6.43665314e+01, -6.60413971e+01,\n",
      "         6.31277618e+01, -5.69869576e+01, -5.90891838e+01,\n",
      "        -4.03346252e+01, -7.70374238e-02, -6.30836754e+01,\n",
      "        -5.26850204e+01,  1.23260326e+01,  1.47042945e-01,\n",
      "         6.07390830e-04,  6.25240555e+01, -7.72208154e-01,\n",
      "         6.20973206e+01, -6.12580605e+01, -2.91075110e-01,\n",
      "         9.30473506e-02,  1.61869287e-01,  6.41898632e+00,\n",
      "         4.36980667e+01, -5.87415397e-02,  8.71889591e-01,\n",
      "        -2.76471168e-01, -6.35242043e+01,  2.27209892e+01,\n",
      "         6.80845797e-01, -3.83884013e-02,  3.39297205e-02,\n",
      "        -4.43913765e+01,  5.72012067e-01,  5.80732231e+01,\n",
      "         5.79455376e+01, -1.07414812e-01,  2.57746756e-01,\n",
      "         2.46898592e-01,  6.39623260e+01,  8.25282764e+00,\n",
      "         1.82934374e-01, -5.13780403e+01, -6.34272957e+01,\n",
      "        -1.60958672e+01],\n",
      "       [-2.62720257e-01,  1.94131362e+00,  5.87500334e-02,\n",
      "         2.38713920e-01,  6.82379055e+00, -1.15814153e-02,\n",
      "         1.50230241e+00, -2.13882588e-02,  4.75324392e+00,\n",
      "         6.30887806e-01, -1.15309563e+01, -5.38227260e-02,\n",
      "        -4.71839523e+00, -3.11009288e+00, -4.09183598e+00,\n",
      "         2.36069441e+00, -1.96568832e-01, -1.50974572e+00,\n",
      "         3.90577614e-01, -8.02453831e-02,  2.05706179e-01,\n",
      "         1.02571703e-01, -3.54939818e-01, -2.92743134e+00,\n",
      "         2.44262123e+00, -4.01910782e-01,  5.03882790e+00,\n",
      "        -6.21722364e+00, -2.77124763e-01, -7.20848203e-01,\n",
      "        -1.59869242e+00,  1.90219975e+01, -2.76602358e-01,\n",
      "         4.51813154e-02,  2.50986423e+01, -7.68034816e-01,\n",
      "        -3.41331029e+00,  2.61868620e+00, -1.91856652e-01,\n",
      "        -7.64313489e-02,  1.64990783e-01,  1.34803367e+00,\n",
      "         4.32375002e+00, -2.09237128e-01,  6.72235668e-01,\n",
      "        -1.26445845e-01, -3.24001670e+00,  5.92872620e+00,\n",
      "        -8.64709690e-02, -2.40046054e-01,  2.54839748e-01,\n",
      "         6.28059769e+00,  5.52270710e-02,  3.29995227e+00,\n",
      "        -8.03809834e+00,  9.13456976e-02,  1.04323246e-01,\n",
      "        -2.24503249e-01, -1.57198083e+00, -6.58890390e+00,\n",
      "        -3.32393736e-01, -7.62452650e+00, -4.15054655e+00,\n",
      "         9.74202538e+00],\n",
      "       [-2.22144812e-01, -2.40653709e-01,  1.51996076e-01,\n",
      "         4.81336676e-02, -1.26276648e+00,  1.22138500e-01,\n",
      "        -1.54831374e+00,  1.43936917e-01,  6.58900067e-02,\n",
      "        -1.59601152e-01,  9.09478739e-02, -1.45132154e-01,\n",
      "         1.03145552e+00, -3.73807192e-01,  2.88981330e-02,\n",
      "        -8.45638931e-01,  1.48309723e-01, -1.98618233e+00,\n",
      "        -2.32633412e-01, -5.06748222e-02, -1.98568448e-01,\n",
      "        -1.05975173e-01, -4.81498957e-01,  6.31479919e-03,\n",
      "        -2.39851162e-01, -2.46620345e+00,  3.13247830e-01,\n",
      "        -6.12755358e-01, -2.02750325e-01,  1.00903280e-01,\n",
      "         1.05105437e-01, -2.08172917e+00, -3.06701243e-01,\n",
      "         8.06271210e-02, -1.47245657e+00, -1.37414142e-01,\n",
      "         8.26181710e-01, -1.20144640e-03,  1.85780495e-01,\n",
      "        -2.56104827e-01,  1.40761316e-01, -8.75105634e-02,\n",
      "         2.99450845e-01, -4.56814170e-02, -3.44256014e-01,\n",
      "         1.56034857e-01, -7.83987343e-02,  9.50867772e-01,\n",
      "        -1.63412929e-01,  3.53940725e-02,  2.04754949e-01,\n",
      "         2.06366032e-02,  3.99122685e-02, -1.65033162e-01,\n",
      "         8.00307035e-01, -1.74849927e-02, -6.02748208e-02,\n",
      "        -1.95261002e-01, -1.70935974e-01,  5.09163320e-01,\n",
      "        -2.68761396e-01, -1.67830582e+01, -4.38552189e+00,\n",
      "        -4.67079544e+00],\n",
      "       [ 1.42104581e-01, -1.33955991e-02, -1.72370702e-01,\n",
      "         6.31649271e-02,  1.99759811e-01, -9.33030248e-02,\n",
      "         7.89516717e-02,  1.32539272e-02,  1.76202923e-01,\n",
      "        -2.32899264e-01, -1.86746031e-01, -8.16944391e-02,\n",
      "         5.33540010e-01, -1.10302515e-01, -8.78305584e-02,\n",
      "        -2.19089016e-02, -1.23422511e-01,  3.15452725e-01,\n",
      "        -3.07332631e-02,  6.61384761e-02, -9.03196558e-02,\n",
      "        -2.43934825e-01,  1.40115589e-01,  9.11392197e-02,\n",
      "        -4.17788811e-02,  3.51982675e-02,  3.44491363e-01,\n",
      "        -5.21854818e-01,  2.55650282e-02,  6.37688637e-02,\n",
      "         5.61093800e-02, -7.44528592e-01,  1.88363925e-01,\n",
      "        -2.35080183e-01,  1.08166181e-01,  1.16751872e-01,\n",
      "        -2.22388804e-02,  7.26484135e-02, -1.40317798e-01,\n",
      "        -2.71617681e-01, -1.32036731e-01, -3.37529331e-01,\n",
      "         4.61514175e-01, -2.10869610e-02, -1.80741370e-01,\n",
      "         3.54411937e-02,  3.66757549e-02, -9.22557175e-01,\n",
      "        -1.00870132e-01, -2.17930377e-02,  1.94500550e-03,\n",
      "         1.95020184e-01, -6.43509179e-02, -2.30765924e-01,\n",
      "        -1.06422216e-01, -1.14026323e-01,  9.55146477e-02,\n",
      "        -2.56335944e-01, -9.55991521e-02,  6.98241532e-01,\n",
      "         1.53519576e-02,  3.34534526e-01, -3.08054715e-01,\n",
      "        -3.25138658e-01]], dtype=float32), array([-0.04657688, -0.04953205, -0.15610872, -0.11358307, -0.03704197,\n",
      "       -0.04660409,  0.00557526, -0.00596207, -0.0806369 , -0.07833088,\n",
      "       -0.08360897,  0.        ,  0.1572998 , -0.02069073, -0.04068779,\n",
      "       -0.01815375, -0.04312901, -0.01646493, -0.02154366, -0.05106737,\n",
      "       -0.02126119, -0.01797612, -0.08804592, -0.11780995, -0.015099  ,\n",
      "       -0.04684459, -0.00739955,  0.01531996,  0.        , -0.10218757,\n",
      "       -0.05019972,  0.0131604 , -0.05486646, -0.06967247, -0.07202572,\n",
      "       -0.12298445,  0.02090443, -0.00638595, -0.02276419,  0.        ,\n",
      "        0.        , -0.08767857, -0.0966432 ,  0.        , -0.06495752,\n",
      "       -0.12550078, -0.05819244,  0.01405757, -0.07446947,  0.        ,\n",
      "       -0.02806179, -0.04552984, -0.04356233,  0.00214493,  0.04661963,\n",
      "        0.        , -0.05892281,  0.        , -0.03897535, -0.00973719,\n",
      "       -0.10638325,  0.0210681 , -0.08569793, -0.06338217], dtype=float32), array([[ 0.06334764,  0.23331612,  0.0015363 , ...,  0.24945836,\n",
      "         0.01396914, -0.16137615],\n",
      "       [-0.08366016,  0.06338686, -0.22747447, ...,  1.4910663 ,\n",
      "         0.44986358, -0.08291967],\n",
      "       [-0.05428928,  0.22394471, -0.02864286, ..., -0.18782751,\n",
      "        -0.14926605, -0.19613342],\n",
      "       ...,\n",
      "       [-0.14475358, -0.07412667,  0.13215931, ..., -1.3329906 ,\n",
      "        -0.48930514,  0.7225526 ],\n",
      "       [-0.11158364, -0.18970919, -0.03480232, ...,  0.33901343,\n",
      "        -0.16415034,  0.997294  ],\n",
      "       [ 0.09730284, -0.15876168,  0.11120793, ...,  1.3300543 ,\n",
      "         0.6006934 ,  0.64617145]], dtype=float32), array([-0.02816756, -0.0535805 , -0.0976483 , -0.02105897, -0.20124358,\n",
      "        0.05311687, -0.08898804,  0.1950516 , -0.00391918,  0.12888606,\n",
      "        0.10016891, -0.11864822, -0.06087841, -0.06943311, -0.00337255,\n",
      "       -0.3245013 , -0.07552673,  0.14800538, -0.03737378,  0.24850231,\n",
      "       -0.06218576, -0.04386669, -0.10089289, -0.06211062, -0.08901308,\n",
      "       -0.12721802,  0.08011912, -0.04663131, -0.03161137, -0.14584191,\n",
      "       -0.09846234, -0.1743818 ], dtype=float32), array([[-1.60719510e-02, -2.27989972e-01, -3.26763064e-01,\n",
      "        -6.51927665e-02, -1.56585887e-01,  1.57910913e-01,\n",
      "        -1.62558667e-02, -1.70707151e-01, -2.55110562e-01,\n",
      "         1.50406420e-01, -1.43951952e-01,  7.23002851e-02,\n",
      "         3.79900038e-02,  1.11635342e-01, -3.35650146e-01,\n",
      "        -1.63814679e-01, -1.53451294e-01,  1.88804626e-01,\n",
      "        -3.20490867e-01, -1.41401589e-01],\n",
      "       [-2.76297200e-02, -9.89376903e-02,  1.39510244e-01,\n",
      "         3.04539576e-02, -2.21993059e-01,  2.07238033e-01,\n",
      "        -3.39550786e-02, -1.08088084e-01, -2.63655841e-01,\n",
      "         3.01866800e-01, -3.07697922e-01, -6.11675382e-02,\n",
      "        -1.80923879e-01,  4.60836031e-02, -2.41638839e-01,\n",
      "         2.57047325e-01, -7.55001307e-02, -2.00400129e-01,\n",
      "         1.30126595e-01,  2.47434527e-02],\n",
      "       [ 3.03252190e-01,  1.64845631e-01,  2.24334002e-03,\n",
      "        -1.65405467e-01, -2.95946777e-01,  1.76924378e-01,\n",
      "        -2.26743147e-01,  1.30999282e-01, -1.22968793e-01,\n",
      "        -9.67135355e-02, -2.40509346e-01,  1.43287301e-01,\n",
      "         2.33224630e-01, -1.19751446e-01, -4.38770056e-02,\n",
      "         2.76192039e-01, -9.22120884e-02,  3.05982739e-01,\n",
      "        -2.05962643e-01,  2.62555361e-01],\n",
      "       [-2.73395181e-01,  2.60583073e-01,  1.60688937e-01,\n",
      "         1.75459176e-01, -6.93946481e-02,  2.90658891e-01,\n",
      "         6.42390996e-02,  2.32432023e-01,  2.00714052e-01,\n",
      "         2.06542253e-01,  3.13386381e-01,  1.17483661e-01,\n",
      "        -1.30150542e-01,  9.86820310e-02,  2.73213089e-01,\n",
      "        -8.24921504e-02,  1.29254743e-01,  1.77047998e-01,\n",
      "        -1.04519650e-01, -2.66168207e-01],\n",
      "       [ 1.42022418e-02,  7.63256073e-01, -2.42150754e-01,\n",
      "         6.20044991e-02, -1.89713344e-01, -1.02896057e-01,\n",
      "        -8.25887144e-01, -2.04973012e-01,  1.04571342e+00,\n",
      "         1.88137531e-01, -3.13827485e-01,  1.05820723e-01,\n",
      "        -1.90337777e+00, -1.10175133e+00,  1.82558000e-02,\n",
      "        -6.26868308e-02,  7.10343421e-01, -2.04671159e-01,\n",
      "        -5.22378504e-01,  6.29522502e-01],\n",
      "       [ 6.19302928e-01,  6.43840134e-01, -2.77998328e-01,\n",
      "        -4.22293991e-01, -2.71506548e-01, -3.91864687e-01,\n",
      "         3.26571584e+00,  1.58518565e+00,  1.58201754e+00,\n",
      "         1.17184734e+00,  1.34062082e-01,  1.72505736e+00,\n",
      "        -1.36290991e+00,  7.45940089e-01,  2.62749642e-01,\n",
      "        -3.15300554e-01,  6.82351708e-01,  1.09476015e-01,\n",
      "         3.30070764e-01,  1.34989178e+00],\n",
      "       [ 2.84193248e-01, -6.69445843e-02, -1.31770372e-02,\n",
      "         3.08564872e-01,  1.40260994e-01,  2.50048339e-02,\n",
      "         2.24440277e-01,  5.91032207e-02, -1.53186664e-01,\n",
      "         1.42577291e-01, -8.82575214e-02, -2.29366735e-01,\n",
      "         3.08973551e-01, -1.39442533e-01,  2.87875533e-03,\n",
      "         1.42608374e-01, -5.24330586e-02, -3.22946534e-02,\n",
      "        -2.35074133e-01,  1.52809799e-01],\n",
      "       [-1.68785477e+00, -4.38894600e-01,  3.27499695e-02,\n",
      "        -1.44087240e-01, -1.94609404e-01, -2.22839803e-01,\n",
      "        -2.41638288e-01, -2.00263441e-01, -9.65812981e-01,\n",
      "         3.11517030e-01, -2.97054350e-01,  6.26270115e-01,\n",
      "        -2.38181353e-01,  1.64585555e+00, -8.90881345e-02,\n",
      "        -1.40381917e-01,  4.45511460e-01,  2.27467015e-01,\n",
      "         5.60244501e-01,  1.93397269e-01],\n",
      "       [ 7.32611120e-01,  7.24755764e-01, -5.99798793e-03,\n",
      "         7.47213587e-02, -2.59396374e-01, -7.72934183e-02,\n",
      "         2.75429815e-01,  6.11435533e-01, -1.91064942e+00,\n",
      "        -6.21302724e-01, -2.77852654e-01,  5.31025350e-01,\n",
      "        -9.07579899e-01,  2.51379520e-01, -9.16708410e-02,\n",
      "        -2.03323830e-02,  5.86223245e-01,  4.22983766e-02,\n",
      "        -4.55693871e-01,  9.91484165e-01],\n",
      "       [-1.17725641e-01,  2.11205646e-01,  1.39134511e-01,\n",
      "        -1.27303556e-01,  1.28713362e-02, -7.17888474e-02,\n",
      "        -9.21839237e-01,  2.33553082e-01,  2.14354086e+00,\n",
      "        -1.17907055e-01, -2.03970850e-01, -4.55749542e-01,\n",
      "         3.04204017e-01,  1.26994383e+00, -4.85993223e-03,\n",
      "        -3.34604084e-01,  8.24862182e-01,  1.59655735e-01,\n",
      "         1.98861086e+00,  1.33754432e+00],\n",
      "       [-1.89534163e+00,  1.21857059e+00, -2.15610519e-01,\n",
      "         7.62108713e-02, -2.54559219e-01, -2.62691557e-01,\n",
      "         7.68699825e-01, -2.17693612e-01, -2.42413521e+00,\n",
      "        -4.65945154e-01, -3.90267253e-01,  1.11183035e+00,\n",
      "        -9.89960909e-01, -3.09176952e-01, -1.98134467e-01,\n",
      "        -2.69242316e-01, -3.61684829e-01, -4.02523488e-01,\n",
      "        -5.66811562e+00,  1.08429229e+00],\n",
      "       [ 8.05560946e-01, -3.55174124e-01, -3.60751122e-01,\n",
      "         6.84651136e-02, -1.08853886e-02, -1.32485688e-01,\n",
      "        -1.53202355e+00, -1.11820304e+00,  3.83199483e-01,\n",
      "        -2.97883010e+00,  4.08758000e-02,  4.45614010e-01,\n",
      "         1.20778978e-01,  1.10042572e+00, -5.42504601e-02,\n",
      "         1.71552688e-01, -6.82788074e-01, -8.22565407e-02,\n",
      "         7.36469924e-01, -1.83755949e-01],\n",
      "       [-1.83182552e-01, -2.46343806e-01,  2.48260081e-01,\n",
      "         1.32813320e-01, -6.41711652e-02, -8.06436241e-02,\n",
      "        -2.41533473e-01,  2.45006919e-01, -3.13182585e-02,\n",
      "        -1.22487852e-02, -1.70800194e-01,  4.26195487e-02,\n",
      "        -1.44854471e-01, -1.99459612e-01, -2.58664936e-01,\n",
      "        -3.63276005e-02,  5.71433119e-02,  1.80841386e-01,\n",
      "        -5.81216812e-03,  3.25750083e-01],\n",
      "       [-1.76321059e-01, -1.78509131e-01,  2.52801716e-01,\n",
      "         1.03981249e-01,  2.54118741e-02, -1.35834306e-01,\n",
      "         1.72245745e-02, -2.80999452e-01,  7.85589218e-02,\n",
      "         8.90001878e-02, -2.39956662e-01,  6.83816597e-02,\n",
      "        -3.65852028e-01, -2.89552420e-01, -2.86031961e-01,\n",
      "         2.72612512e-01, -4.24922287e-01, -1.31054437e-02,\n",
      "         9.60529037e-03,  1.85950235e-01],\n",
      "       [-6.97613060e-01,  1.32218325e+00,  1.19384460e-01,\n",
      "        -3.11046839e-02,  2.28484347e-02, -3.73017043e-01,\n",
      "         4.45288658e-01,  4.01729159e-02, -1.62718177e+00,\n",
      "         3.56503934e-01,  1.32045791e-01, -7.10497750e-03,\n",
      "        -1.39396524e+00, -6.12935364e-01, -2.52825946e-01,\n",
      "         4.53188121e-02,  1.32342562e-01,  1.10776797e-01,\n",
      "        -1.79984939e+00, -1.02559161e+00],\n",
      "       [ 7.02809453e-01, -2.56982952e-01, -7.45452121e-02,\n",
      "        -7.16503710e-02, -2.97964126e-01,  2.27270335e-01,\n",
      "        -6.86840177e-01, -1.20096815e+00,  3.78126353e-01,\n",
      "        -1.46636212e+00,  1.80631787e-01, -1.47717988e+00,\n",
      "         1.70877770e-01, -1.69571340e+00, -1.96051434e-01,\n",
      "        -3.99667084e-01,  1.27595973e+00, -8.22986960e-02,\n",
      "         4.39407200e-01,  3.19207877e-01],\n",
      "       [ 1.07004859e-01,  4.32260819e-02, -3.10589761e-01,\n",
      "         9.13152844e-02,  2.54279673e-02, -7.60444701e-02,\n",
      "         3.07272971e-01,  2.74439394e-01,  2.08575010e-01,\n",
      "         1.58223480e-01, -2.77878970e-01, -1.32541165e-01,\n",
      "         7.31504336e-02,  5.33326939e-02, -2.31447622e-01,\n",
      "         3.27431858e-01, -6.48334846e-02, -7.14414492e-02,\n",
      "        -2.60923445e-01, -4.10562903e-02],\n",
      "       [-3.29373884e+00, -7.69549515e-03, -1.73527703e-01,\n",
      "         1.01785557e-02,  8.61224756e-02, -3.21820587e-01,\n",
      "        -2.83249076e-02,  8.11116636e-01, -1.23690784e+00,\n",
      "         6.74378633e-01, -1.28317717e-02, -3.63610715e-01,\n",
      "         4.88299400e-01, -6.46225274e-01, -1.63963109e-01,\n",
      "        -2.73955673e-01,  5.89028239e-01, -3.24003249e-01,\n",
      "        -3.06406617e+00, -2.22164154e+00],\n",
      "       [-4.84778173e-02,  1.49625778e-01,  1.01090997e-01,\n",
      "        -1.13899633e-01,  3.13369811e-01, -7.47540519e-02,\n",
      "        -3.03798676e-01, -2.10726961e-01, -2.70341504e-02,\n",
      "        -7.36069158e-02,  2.51480997e-01,  2.08313182e-01,\n",
      "        -7.25944862e-02,  3.61002237e-02, -1.31327406e-01,\n",
      "        -7.56346658e-02,  1.20880418e-01, -1.15247406e-01,\n",
      "         1.87467515e-01, -1.13832287e-01],\n",
      "       [-2.99068832e+00, -1.57173824e+00, -1.61246672e-01,\n",
      "         6.21678233e-02,  1.09823503e-01,  1.68929592e-01,\n",
      "        -8.59567344e-01, -6.30165279e-01,  5.45981526e-01,\n",
      "         8.84678885e-02, -2.11574525e-01, -2.43786033e-02,\n",
      "         8.18412244e-01,  1.18868031e-01, -2.38545369e-02,\n",
      "         1.32291287e-01, -4.42483574e-01, -3.36275786e-01,\n",
      "        -5.79839230e+00,  1.43350554e+00],\n",
      "       [-1.67801768e-01, -2.57413268e-01,  1.99974298e-01,\n",
      "         2.72382140e-01, -9.68828499e-02, -1.93916738e-01,\n",
      "         9.40720513e-02, -6.00265078e-02, -1.41130388e-01,\n",
      "        -2.74861127e-01,  2.83524454e-01, -2.56652176e-01,\n",
      "        -3.88846584e-02, -1.20480157e-01, -7.99543560e-02,\n",
      "         8.47300887e-03,  2.97003746e-01, -1.36609031e-02,\n",
      "         2.67196149e-01,  2.64001548e-01],\n",
      "       [ 2.38585785e-01,  6.05896473e-01, -1.06068797e-01,\n",
      "        -1.38724342e-01, -3.36014964e-02,  1.00655640e-02,\n",
      "         3.23536575e-01,  4.93838400e-01,  2.02908158e+00,\n",
      "        -1.69747996e+00, -3.28621149e-01, -5.61284125e-01,\n",
      "         6.86662316e-01,  3.16228539e-01, -2.56087519e-02,\n",
      "        -1.66656002e-02,  7.45625496e-01,  8.91563892e-02,\n",
      "         2.93013841e-01,  1.10526514e+00],\n",
      "       [ 2.09507793e-01,  1.94619089e-01,  2.68830478e-01,\n",
      "         3.06611866e-01, -8.47308636e-02,  1.80562168e-01,\n",
      "         1.62784398e-01,  1.31610423e-01, -2.00748578e-01,\n",
      "         1.12253509e-01, -2.61397928e-01, -5.93776256e-02,\n",
      "         1.06857195e-01, -1.31869391e-01, -1.93132788e-01,\n",
      "         2.69564509e-01,  3.63153964e-01,  2.95128375e-01,\n",
      "        -3.11337650e-01,  2.12127835e-01],\n",
      "       [-2.41567403e-01, -2.23111436e-01,  3.22516680e-01,\n",
      "        -1.37708887e-01, -3.32439572e-01,  2.79155165e-01,\n",
      "        -2.23155841e-01,  1.55604586e-01,  1.14434905e-01,\n",
      "         2.32968345e-01,  7.90387020e-02,  1.61597535e-01,\n",
      "         2.90762156e-01, -6.59981221e-02, -2.58502692e-01,\n",
      "        -7.66605064e-02,  1.04249090e-01, -1.58074647e-01,\n",
      "         3.38447571e-01, -1.74218222e-01],\n",
      "       [-1.10816576e-01, -1.69699207e-01,  1.00114137e-01,\n",
      "         7.79603347e-02, -1.94839820e-01,  1.96434587e-01,\n",
      "        -2.84763098e-01,  6.21004552e-02, -2.49574095e-01,\n",
      "        -2.19254449e-01, -3.14218998e-01,  3.56901363e-02,\n",
      "        -2.02394441e-01,  1.26495346e-01, -2.49689817e-01,\n",
      "         1.36488333e-01, -2.64026761e-01, -1.50762975e-01,\n",
      "         1.61014095e-01,  7.77637735e-02],\n",
      "       [ 2.07240228e-03,  3.38053852e-01, -1.34553134e-01,\n",
      "         2.17700541e-01, -2.42180079e-01, -4.91493419e-02,\n",
      "         4.19959128e-01, -3.34657168e+00, -7.34999105e-02,\n",
      "        -1.70745397e+00,  1.26196131e-01,  4.23180908e-01,\n",
      "         9.82409835e-01,  1.08778834e+00, -1.58880249e-01,\n",
      "        -2.61115968e-01,  9.05825868e-02, -1.26688898e-01,\n",
      "         8.90173167e-02,  1.64467549e+00],\n",
      "       [ 3.57092410e-01, -2.92809337e-01, -7.77928904e-02,\n",
      "         1.15365490e-01, -2.39474013e-01,  5.29304668e-02,\n",
      "         7.44829118e-01, -3.75545919e-01,  5.85133672e-01,\n",
      "         9.55486000e-02, -1.77227303e-01, -1.51769781e+00,\n",
      "        -1.36558905e-01, -3.24726880e-01, -2.57170469e-01,\n",
      "        -3.11048955e-01,  6.13194466e-01,  2.49463066e-01,\n",
      "        -1.35177469e+00,  1.13342464e+00],\n",
      "       [ 4.70412076e-01, -5.66269279e-01,  1.84575230e-01,\n",
      "        -4.15643901e-01, -3.96198392e-01,  6.06837645e-02,\n",
      "         2.17490911e+00, -1.30879343e+00,  6.52682066e-01,\n",
      "        -3.39088619e-01, -1.43887043e-01,  2.19121817e-02,\n",
      "        -1.34639516e-01, -1.14556551e+00,  4.74652788e-03,\n",
      "        -4.47783098e-02, -4.34695572e-01, -2.92351246e-01,\n",
      "         3.05323273e-01, -9.62819278e-01],\n",
      "       [ 1.39747471e-01, -3.32430661e-01, -2.61218756e-01,\n",
      "        -7.60827661e-02, -1.60371289e-01,  3.02277029e-01,\n",
      "        -1.43403918e-01,  1.47497058e-01, -3.22778255e-01,\n",
      "         1.79009497e-01,  1.09790921e-01, -3.25526744e-02,\n",
      "        -2.44446158e-01,  2.50592917e-01, -2.08576724e-01,\n",
      "        -2.40200996e-01,  1.13196254e-01, -3.30348432e-01,\n",
      "         1.46007627e-01,  1.64842516e-01],\n",
      "       [-5.22789621e+00,  3.59531194e-01, -1.47109121e-01,\n",
      "        -1.26482889e-01,  7.31136873e-02,  7.37875998e-02,\n",
      "         8.14597130e-01,  8.91179562e-01, -1.66708648e+00,\n",
      "         2.41461658e+00, -3.00293446e-01,  2.73074895e-01,\n",
      "         9.56302702e-01, -9.26518738e-01,  6.69583455e-02,\n",
      "        -1.77395642e-01,  1.27955103e+00, -2.27942392e-01,\n",
      "        -4.13478851e+00, -8.04433525e-01],\n",
      "       [-2.54602170e+00,  7.86993504e-02, -7.61420429e-02,\n",
      "         9.75064840e-03, -3.55529845e-01,  2.03591153e-01,\n",
      "         1.58844852e+00,  5.97048879e-01, -2.00396836e-01,\n",
      "         6.66658103e-01,  7.62056559e-02, -7.92641640e-01,\n",
      "         1.41136622e+00, -3.93155158e-01, -1.84573121e-02,\n",
      "        -7.84352049e-02, -3.11494172e-01, -9.38266441e-02,\n",
      "         4.15046632e-01,  4.14698152e-03],\n",
      "       [ 2.46587813e-01,  8.33386958e-01, -1.73180565e-01,\n",
      "         2.12685630e-01,  2.17299089e-01,  2.71769196e-01,\n",
      "        -6.23086274e-01, -1.52017272e+00,  9.82781708e-01,\n",
      "         3.31435233e-01,  2.63637841e-01,  1.49468493e+00,\n",
      "        -3.00970584e-01, -2.08958769e+00,  1.18861087e-02,\n",
      "         2.46151805e-01, -5.35548747e-01,  2.15581045e-01,\n",
      "        -1.89282522e-01, -6.88502133e-01]], dtype=float32), array([-0.26039582,  0.03177178, -0.0098727 , -0.19400766, -0.06677341,\n",
      "       -0.12142077, -0.11178888,  0.02793142, -0.02913794, -0.0178673 ,\n",
      "       -0.16057497,  0.1894424 ,  0.33979952,  0.05941596, -0.07363932,\n",
      "       -0.16329372,  0.10775244, -0.14627263, -0.1032267 , -0.2220378 ],\n",
      "      dtype=float32), array([[ 4.16919470e-01, -9.28053707e-02, -8.96848023e-01,\n",
      "         5.45519352e-01,  3.59393191e+00, -9.67001259e-01,\n",
      "         8.96067917e-01,  1.35889494e+00,  8.99985805e-02,\n",
      "        -1.47291017e+00, -6.77240014e-01, -1.79443455e+00,\n",
      "        -1.00210118e+00, -4.99542981e-01,  7.36947358e-01,\n",
      "         5.79335809e-01],\n",
      "       [-1.15333724e+00,  2.68929958e-01, -1.29818523e+00,\n",
      "        -1.95924175e+00,  1.49637938e+00, -4.78016317e-01,\n",
      "         1.04187988e-01, -1.39768660e-01,  1.12481214e-01,\n",
      "        -5.13016522e-01,  5.98922670e-01, -7.98567355e-01,\n",
      "        -3.36541384e-01, -7.91012108e-01, -1.25872803e+00,\n",
      "        -8.94612968e-01],\n",
      "       [-2.38733098e-01, -3.71680930e-02, -2.66401082e-01,\n",
      "        -3.15454036e-01,  2.84498751e-01,  2.52105743e-01,\n",
      "         2.94730991e-01, -2.98248172e-01, -1.36043876e-01,\n",
      "        -6.39257878e-02,  1.59728178e-03, -8.77211988e-02,\n",
      "         3.14245045e-01, -1.23020299e-01,  1.60371825e-01,\n",
      "        -2.03180850e-01],\n",
      "       [ 3.26609224e-01,  3.10599566e-01, -1.11298077e-01,\n",
      "        -6.44517392e-02, -2.67303944e-01,  1.56620577e-01,\n",
      "         7.05744401e-02, -1.44977942e-01,  4.40770745e-01,\n",
      "         5.28415553e-02, -2.07784802e-01, -2.34037995e-01,\n",
      "        -1.96158260e-01, -9.07357708e-02,  3.66960138e-01,\n",
      "        -3.51823568e-01],\n",
      "       [-1.46620780e-01,  9.49823633e-02,  9.21847969e-02,\n",
      "        -2.32402325e-01,  1.77593336e-01,  1.91114210e-02,\n",
      "        -1.52208969e-01,  2.78537393e-01,  3.02346468e-01,\n",
      "         6.22512735e-02,  2.88464218e-01, -1.13044880e-01,\n",
      "         1.36010751e-01, -3.56636822e-01,  8.77995938e-02,\n",
      "        -2.17274427e-01],\n",
      "       [ 2.67980486e-01, -3.60429168e-01,  4.07636851e-01,\n",
      "         1.46944359e-01,  1.97598308e-01,  8.04466009e-02,\n",
      "         3.82368922e-01,  3.09096426e-01,  1.56114623e-01,\n",
      "        -7.90998153e-03,  4.94812056e-02,  2.40764245e-01,\n",
      "        -3.25042605e-01, -4.02380228e-01, -3.87041688e-01,\n",
      "         1.88696772e-01],\n",
      "       [ 9.07711625e-01, -3.44464660e-01, -8.09557974e-01,\n",
      "        -1.53785253e+00, -9.34822261e-02, -2.23151350e+00,\n",
      "         2.47802302e-01, -1.20837915e+00, -3.19995016e-01,\n",
      "         2.37459630e-01,  1.41283047e+00, -5.59506178e-01,\n",
      "         1.60385251e-01, -1.48237050e+00, -3.21497113e-01,\n",
      "        -1.92512676e-01],\n",
      "       [ 6.49029374e-01, -9.90251958e-01,  5.15031815e-01,\n",
      "         5.99001348e-01, -4.79912996e-01, -9.02979016e-01,\n",
      "         1.38185418e+00,  8.86676431e-01, -1.48370922e-01,\n",
      "         3.29489596e-02,  4.17124331e-01,  1.73595294e-01,\n",
      "        -4.70732063e-01,  5.97449064e-01, -2.84090549e-01,\n",
      "         1.44916058e+00],\n",
      "       [ 1.54068482e+00,  3.06302518e-01,  1.15238535e+00,\n",
      "         8.86730015e-01,  4.91894066e-01,  4.49158430e-01,\n",
      "        -1.24616289e+00,  1.87769461e+00, -1.10837436e+00,\n",
      "        -2.94515401e-01, -1.83419466e-01, -4.38729197e-01,\n",
      "        -7.08075821e-01,  5.75930297e-01,  9.29402590e-01,\n",
      "         8.60497773e-01],\n",
      "       [-8.58319104e-01, -1.52438879e+00, -1.57335162e-01,\n",
      "         1.20836478e-02,  1.26191211e+00, -7.79477000e-01,\n",
      "         8.24522734e-01,  1.79159749e+00, -1.53096706e-01,\n",
      "        -1.18194067e+00, -8.40436161e-01, -4.23531115e-01,\n",
      "        -8.63854468e-01, -1.90811843e-01, -5.94830096e-01,\n",
      "         2.78220963e+00],\n",
      "       [-8.47088844e-02, -1.05870798e-01,  1.72365144e-01,\n",
      "         2.83694007e-02, -3.29307079e-01,  2.78455794e-01,\n",
      "         6.29348382e-02,  3.01365077e-01,  6.32536039e-02,\n",
      "         9.47091803e-02, -1.69397090e-02,  2.05219805e-01,\n",
      "         1.38357520e-01, -8.41977149e-02, -1.67578906e-01,\n",
      "        -2.40399763e-02],\n",
      "       [-8.09531808e-01,  1.60032177e+00, -4.05524343e-01,\n",
      "        -2.12804627e+00, -4.80484784e-01,  1.45907030e-01,\n",
      "         1.75157881e+00, -7.93499827e-01,  6.29590631e-01,\n",
      "        -1.81058660e-01,  1.74461472e+00, -5.69922924e-01,\n",
      "        -1.06844835e-01,  6.87013790e-02, -9.26992178e-01,\n",
      "         2.16998041e-01],\n",
      "       [ 6.82859123e-01,  8.82588625e-02,  6.58422649e-01,\n",
      "         3.97924423e-01, -1.28704834e+00,  1.36397350e+00,\n",
      "        -1.26863670e+00, -7.21433759e-01, -7.66701162e-01,\n",
      "         7.81431377e-01, -1.14901769e+00,  1.44346118e+00,\n",
      "         1.28638291e+00, -1.13475494e-01,  5.64735591e-01,\n",
      "         7.35357583e-01],\n",
      "       [ 1.89714921e+00,  4.89212990e-01,  1.03907561e+00,\n",
      "        -6.16307080e-01, -1.11283517e+00, -4.14628893e-01,\n",
      "        -2.73470461e-01, -1.23968586e-01,  2.78121024e-01,\n",
      "        -7.16460288e-01, -2.44956270e-01,  1.55091608e+00,\n",
      "         1.02790082e+00,  1.02486543e-01,  1.44230497e+00,\n",
      "        -3.50790471e-01],\n",
      "       [-1.96866870e-01,  1.52274325e-01,  2.93268412e-01,\n",
      "         4.39734519e-01, -3.88659716e-01,  1.31148487e-01,\n",
      "        -2.56282985e-01,  1.79286078e-01,  2.08320156e-01,\n",
      "        -2.17953593e-01,  1.09656140e-01,  3.53425086e-01,\n",
      "        -2.74082631e-01, -1.37177557e-01, -2.90065348e-01,\n",
      "        -2.24418074e-01],\n",
      "       [-6.53889179e-02,  2.18512475e-01, -1.63440317e-01,\n",
      "         2.90187746e-01,  3.80256563e-01,  3.19749296e-01,\n",
      "        -3.07694703e-01,  2.65769009e-02, -3.00284564e-01,\n",
      "        -3.51940304e-01,  2.41946265e-01, -4.21713740e-01,\n",
      "         1.88242540e-01, -3.63322884e-01,  2.47048810e-01,\n",
      "         9.80617106e-02],\n",
      "       [ 8.13115895e-01, -8.90932798e-01,  6.92978144e-01,\n",
      "         3.70496452e-01,  4.67786580e-01, -9.23636332e-02,\n",
      "         2.32103392e-01,  6.68967813e-02, -6.67180777e-01,\n",
      "         2.78389871e-01, -4.86703329e-02,  8.88240039e-02,\n",
      "         8.78055468e-02,  6.75936788e-02,  9.90816534e-01,\n",
      "        -1.69074595e-01],\n",
      "       [ 3.32812548e-01,  1.56638682e-01, -1.54425204e-01,\n",
      "        -9.44117233e-02,  3.01514268e-01, -1.00602627e-01,\n",
      "         1.24294832e-01, -1.08729854e-01, -2.22665891e-01,\n",
      "         2.20165953e-01,  4.66114879e-02,  3.45131278e-01,\n",
      "        -3.42543572e-02, -9.13849007e-03, -2.95693099e-01,\n",
      "        -4.90940921e-02],\n",
      "       [ 6.42485991e-02, -8.81451249e-01, -1.08316135e+00,\n",
      "         2.45762005e-01,  3.33248448e+00, -5.24386406e-01,\n",
      "         2.30975461e+00,  7.75808156e-01,  1.00895429e+00,\n",
      "        -1.58678985e+00, -6.29038393e-01, -1.13341928e+00,\n",
      "        -8.87888014e-01, -1.82792819e+00,  7.01159388e-02,\n",
      "        -1.16203809e+00],\n",
      "       [-1.29316121e-01,  2.28560829e+00, -1.25767902e-01,\n",
      "        -1.64792609e+00,  1.60611260e+00,  4.37469780e-01,\n",
      "         1.25753772e+00,  7.43385851e-01, -2.02759448e-02,\n",
      "         1.76879060e+00,  2.50294626e-01, -1.69235691e-01,\n",
      "         1.38418317e-01,  1.56889832e+00, -1.84450030e-01,\n",
      "         9.35285687e-01]], dtype=float32), array([ 0.32276705, -0.92878497,  0.33238533,  0.33570218, -0.29434997,\n",
      "        0.35368815, -0.1617477 , -0.21654874, -0.2653514 , -0.5833322 ,\n",
      "       -0.06282248,  0.13984443,  0.397742  , -1.1425583 ,  0.44092438,\n",
      "       -0.64466715], dtype=float32), array([[-0.3163381 , -0.01168535, -0.01006102, -0.87775254,  0.64473486,\n",
      "         1.2856557 ,  0.161856  , -0.47864965],\n",
      "       [-0.03097514,  0.25379094,  0.90604824,  0.3249091 , -0.731612  ,\n",
      "        -0.62253433,  1.3233408 ,  0.01336895],\n",
      "       [ 0.19859831,  0.03060509, -0.20460968, -0.4084961 , -0.43643156,\n",
      "         1.0947195 ,  0.9105416 ,  0.05500083],\n",
      "       [ 0.3675749 ,  0.67148536, -0.6856792 , -0.20235574,  1.8287597 ,\n",
      "         0.8205633 , -0.3767638 , -0.09436087],\n",
      "       [ 0.10256226,  1.5421705 , -0.99626267,  0.3349876 ,  0.36741492,\n",
      "        -1.3328283 ,  0.8561456 , -0.81227535],\n",
      "       [-0.14050758,  0.12277737, -0.823096  ,  1.1716411 ,  0.03338096,\n",
      "        -1.6694986 ,  0.65074205,  0.94510984],\n",
      "       [-0.44411802,  0.83448744,  0.47177622,  0.1296948 ,  0.8642995 ,\n",
      "        -1.9255112 , -1.244906  , -0.83524835],\n",
      "       [ 0.3286107 ,  1.3716149 , -0.4360562 , -0.25115278,  1.4726591 ,\n",
      "        -0.7169921 ,  0.55404836, -0.5362258 ],\n",
      "       [-0.09982404, -0.34800765,  0.75509554,  0.4055738 , -0.03829921,\n",
      "        -0.33435768, -1.0431226 , -0.27582312],\n",
      "       [-0.29136345,  1.341641  ,  0.46102828, -0.01463878, -0.3085059 ,\n",
      "        -0.20156975,  0.99773645, -0.05478413],\n",
      "       [ 0.331621  , -0.17545788,  2.1627166 ,  0.94550097, -0.99886304,\n",
      "         0.5368396 ,  0.3012115 , -2.2467084 ],\n",
      "       [-0.1602928 , -1.0177306 , -0.6000846 , -0.54854506, -1.235353  ,\n",
      "         0.4005653 ,  0.28697956, -0.02002366],\n",
      "       [ 0.46868777, -0.16325198, -0.6787912 ,  0.53346425, -0.8569955 ,\n",
      "         0.8661872 ,  0.78669614,  0.47662494],\n",
      "       [ 0.45010182,  1.6970994 ,  0.9438781 ,  0.33262157,  0.48561987,\n",
      "        -0.56336516,  0.55694926,  1.1973443 ],\n",
      "       [-0.325096  ,  0.01072991, -1.0498608 , -0.5281792 ,  0.3171423 ,\n",
      "         1.0965333 ,  0.3688794 , -0.43581823],\n",
      "       [-0.14480181,  0.7482608 ,  0.6405673 ,  0.05699411,  1.1620938 ,\n",
      "        -1.1986247 ,  0.32312837,  0.7797185 ]], dtype=float32), array([-0.32915512, -0.48509982, -0.6787085 , -0.09646716, -0.1195571 ,\n",
      "        0.35213894, -0.07175443, -0.4865974 ], dtype=float32), array([[ 0.64628273, -0.54869384],\n",
      "       [ 1.315296  , -0.9859163 ],\n",
      "       [ 2.0422328 , -1.3877845 ],\n",
      "       [ 0.77339584, -0.5806708 ],\n",
      "       [-1.2384639 ,  1.2526891 ],\n",
      "       [-0.67145675,  0.62481844],\n",
      "       [-1.0449119 ,  1.1102481 ],\n",
      "       [-1.5578392 ,  1.1641351 ]], dtype=float32), array([ 1.9745257, -1.9745252], dtype=float32)]\n"
     ]
    }
   ],
   "source": [
    "weights = model.get_weights()\n",
    "print(weights)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# In[6]:\n",
    "\n",
    "\n",
    "# Again for a file we are making all permutations and are passing through Model for prediction.\n",
    "for diff_file in files:\n",
    "# for layer in range(1,20):\n",
    "    arr_predict = []\n",
    "    train_df = pd.read_csv(diff_file,header=None)\n",
    "    \n",
    "    myname = \"results_\"+diff_file\n",
    "    train_df = train_df.sort_values(by=[1],ascending=False)\n",
    "    print_ver_GF = train_df.dropna(axis=1)\n",
    "    print_ver_GF = np.asarray(print_ver_GF)\n",
    "#     print(print_ver_GF[0,1])\n",
    "    train_df = train_df.drop([0,1,2,3,4,5,6,7,8,9], axis=1)\n",
    "    train_df = train_df.dropna(axis=1)\n",
    "    npdata = np.array(train_df)\n",
    "#     for i in range(len(npdata)):\n",
    "#         for j in range(i+1,len(npdata)):\n",
    "#             arr_predict.append(np.concatenate((npdata[i],npdata[j]), axis=0))\n",
    "    for i in range(len(npdata)):\n",
    "        for j in range(len(npdata)):\n",
    "            arr_predict.append(np.concatenate((npdata[i],npdata[j]), axis=0))\n",
    "    arr_predict = pd.DataFrame(arr_predict) \n",
    "    arr_predict[\"sum\"] = arr_predict.sum(axis=1)\n",
    "    arr_predict = arr_predict.loc[:,[0,1,2,3,4,5,6,7]].div(arr_predict[\"sum\"], axis=0)\n",
    "    arr_predict = np.asarray(arr_predict)\n",
    "    prediction = model.predict(arr_predict)\n",
    "#     print(\"Prediction array data \",arr_predict[1,:])\n",
    "#     print(\"Prediction array data \",arr_predict[2,:])\n",
    "#     break\n",
    "\n",
    "\n",
    "# Uptill here we have the predicted output data ready.\n",
    "# Now we calculate number of wins for each data point and append (ActualRank, GFlops, Version, wins,\n",
    "# PolyRank) values in \"print_result\" list, for each file\n",
    "\n",
    "    version =0\n",
    "    flag=0\n",
    "    count_win =0\n",
    "    distinct_wins = []\n",
    "    Actual_rank = 0\n",
    "    print_result = []\n",
    "#     for x in prediction:\n",
    "#         print(x)\n",
    "#     break\n",
    "    for values in prediction[:,0]:\n",
    "        if flag<len(npdata):\n",
    "            flag +=1\n",
    "            if values>0.7:\n",
    "                count_win+=1\n",
    "        else:\n",
    "            print_result.append([Actual_rank+1,print_ver_GF[Actual_rank,1],print_ver_GF[Actual_rank,0],count_win])\n",
    "            Actual_rank+=1\n",
    "            version+=1\n",
    "            if count_win not in distinct_wins:\n",
    "                distinct_wins.append(count_win)\n",
    "            count_win=0\n",
    "            flag=1\n",
    "            if values>0.7:\n",
    "                count_win+=1\n",
    "    print_result.append([Actual_rank+1,print_ver_GF[Actual_rank,1],print_ver_GF[Actual_rank,0],count_win])\n",
    "    if count_win not in distinct_wins:\n",
    "        distinct_wins.append(count_win)\n",
    "    \n",
    "# On the basis of Number of wins, We are calculating the number of Polyrank for each data point.\n",
    "    distinct_wins.sort(reverse = True)\n",
    "    polyrank = []\n",
    "    for values in print_result:\n",
    "        polyrank.append(distinct_wins.index(values[3])+1)\n",
    "    polyrank = pd.DataFrame(polyrank)\n",
    "    Final = pd.concat([pd.DataFrame(print_result),polyrank], axis=1, sort=False)\n",
    "    Final= np.asarray(Final)\n",
    "\n",
    "    temp = Final[Final[:,4] == 1]\n",
    "\n",
    "    num_row_in_top5_per = math.ceil((Final.shape[0])*0.05)\n",
    "    rank = 1\n",
    "\n",
    "# Calculating best in Top 5%\n",
    "    top5_max_list =[]    \n",
    "    while num_row_in_top5_per>0:\n",
    "        temp_rank = Final[Final[:,4] == rank]\n",
    "        top5_max_list.append(np.max(temp_rank[:,1]))\n",
    "        num_row_in_top5_per-=temp_rank.shape[0]\n",
    "        rank+=1\n",
    "        \n",
    "    top5_perf_list = [np.max(Final[:,1]),np.max(temp[:,1]),Final.shape[0],max(top5_max_list),np.min(Final[:,1]),np.median(Final[:,1])]\n",
    "#     print(\"Hello\",top5_perf_list)\n",
    "\n",
    "# Writing the Wins, polyrank etc to a file.\n",
    "    f = open(myname, \"a+\") \n",
    "    f.write('ActualRank, GFlops, Version, wins, PolyRank,\\n')\n",
    "    f.close()\n",
    "    for values in Final:\n",
    "        f = open(myname, \"a+\")        \n",
    "        str_temp = \"\"\n",
    "        for val in values:\n",
    "            str_temp = str_temp + str(val)+\", \"\n",
    "        f.write(\"%s\\n\" % str_temp)\n",
    "        f.close()\n",
    "\n",
    "# Creating summary files  and writing it to a file\n",
    "    myname_summary = \"summary_results_matmul\"\n",
    "#     string2 = re.search(\"\\w+/\\w+/\",diff_file).group(0)\n",
    "#     if string2 in diff_file:\n",
    "#         string2 = diff_file.replace(string2,'')\n",
    "#     if \"_poly_perf.csv\" in string2:\n",
    "#         string2 = string2.replace(\"_poly_perf.csv\",'')\n",
    "        \n",
    "    f = open(myname_summary, \"a\")\n",
    "#     f.write(\"Max_GFLOPS, Poly_Top_1GFLOPS,numVariants,Poly_Top_0.050000,Min_GFLOPS,Median_GFLOPS,\\n\")\n",
    "    string2=diff_file\n",
    "    str_temp = string2+\", \"\n",
    "    for val in top5_perf_list:\n",
    "        str_temp = str_temp + str(val) + \", \"\n",
    "    f.write(\"%s\\n\" % str_temp)\n",
    "    f.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(type(arr_predict))\n",
    "print(arr_predict[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(npdata[0])\n",
    "print(npdata[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "100_4096_4096_4096__16_16_16_16_16_16_it2_32,803.56,7,2,0,2,8552,1048584,0,268172288,7232,523264,525320,268172288\n",
    "100_4096_4096_4096__16_16_16_16_16_16_jt2_32,715.46,7,1,0,3,8552,523264,0,335805448,7232,523264,0,268172288"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(train_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
